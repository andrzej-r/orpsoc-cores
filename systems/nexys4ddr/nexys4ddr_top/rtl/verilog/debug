#!/usr/bin/ipython -i

import serial
import sys
import time

ser = serial.Serial('/dev/ttyUSB1', 115200, timeout=0.1)

def readline2():
    #time.sleep(0.01)
    l = ser.read(3)
    if (l != '-> '):
        l = l + ser.readline()
        return l
    return None

def writeLine(line):
    for c in line:
        ser.write(c)
        cr = ser.read()
        sys.stdout.write(cr)

def flush():
    l = readline2()
    while (l and l != "-> "):
        sys.stdout.write(l)
        l = readline2()

def c(cmd):
    #ser.write(cmd)
    writeLine(cmd)
    flush()

def w(address, data):
    #ser.write("w {:08X} {:02X}\r".format(address, data))
    c("w {:08X} {:02X}\r".format(address, data))

def r(address, cnt=1):
    #ser.write("r {:08X} {:02X}\r".format(address, cnt))
    #writeLine("r {:08X} {:02X}\r".format(address, cnt))
    #flush()
    c("r {:08X} {:02X}\r".format(address, cnt))

def sync():
    c("\r")

def write_prog(prog_name):
    prog_file = open(prog_name,'r')
    lines = prog_file.readlines()
    prog_file.close()
    for l in lines:
        l = l.rstrip()
        if (l.startswith('@')):
            addr = int(l.lstrip('@'), 16)
            continue
        if (len(l) > 0):
            val = int(l, 16)
            w(addr, val)
            addr = addr + 4

def write_hex_(hex_name):
    hex_file = open(hex_name,'r')
    lines = hex_file.readlines()
    hex_file.close()
    for l in lines:
        l = l.rstrip()
        if (not l.startswith(':')):
            continue
        l = l.lstrip(':')
        length = int(l[0:2], 16)
        address = int(l[2:6],16)
        cmd = int(l[6:8],16)
        if (len(l) > 0 and cmd == 0):
            val = 0
            for i in xrange(0,length):
                byte = int(l[8+2*i:10+2*i], 16)
                val = val + byte * (256 ** (3 - (address % 4)))
                #print hex(address) + ' ' + hex(address) + ' ' + hex(byte) + ' ' + hex(val)
                if (address % 4 == 3):
                    #print '-- ' + hex(address) + ' ' + hex(address) + ' ' + hex(byte) + ' ' + hex(val)
                    w(address-3, val)
                    val = 0
                address = address + 1
                #w(address, val)

def write_hex(hex_name):
    hex_file = open(hex_name,'r')
    lines = hex_file.readlines()
    hex_file.close()
    for l in lines:
        l = l.rstrip()
        if (not l.startswith(':')):
            continue
        l = l.lstrip(':')
        length = int(l[0:2], 16)
        address = int(l[2:6],16)
        cmd = int(l[6:8],16)
        if (len(l) > 0 and cmd == 0):
            i = 0
            while i < length:
                val = 0
                for j in xrange(0,4):
                    if i == length:
                        break
                    byte = int(l[8+2*i:10+2*i], 16)
                    val = val + byte * (256 ** (3 - j))
                    #print l + '\n  ' + hex(address) + ' ' + hex(i) + ' ' + hex(j) + ' ' + hex(byte) + ' ' + hex(val)
                    i = i + 1
                w(address, val)
                #print ("{:08X}_{:08X}".format(address, val))
                address = address + 4

sync()

def rgbFlash(led, color):
    # color [r, g, b], r/g/b = [0:1]
    for i in xrange(0,15):
        c = [min(int(x * 1.5**i), 255) for x in color]
        rgbLED (led, c)
        #time.sleep(0.01)
    for i in reversed(xrange(0, 15)):
        c = [min(int(x * 1.5**i), 255) for x in color]
        rgbLED (led, c)
        #time.sleep(0.01)
    rgbLED (led, [0, 0, 0])

def rgbFlash2():
    # color [r, g, b], r/g/b = [0:1]
    for i in xrange(0,15):
        c0 = [min(int(x * 1.5**i), 255) for x in [1,0,0]]
        c1 = [min(int(x * 1.5**i), 255) for x in [0,0,1]]
        rgbLED (0, c0)
        rgbLED (1, c1)
    for i in reversed(xrange(0, 15)):
        c0 = [min(int(x * 1.5**i), 255) for x in [1,0,0]]
        c1 = [min(int(x * 1.5**i), 255) for x in [0,0,1]]
        rgbLED (0, c0)
        rgbLED (1, c1)
    rgbLED (0, [0, 0, 0])
    rgbLED (1, [0, 0, 0])
    for i in xrange(0,15):
        c0 = [min(int(x * 1.5**i), 255) for x in [1,0,0]]
        c1 = [min(int(x * 1.5**i), 255) for x in [0,0,1]]
        rgbLED (0, c1)
        rgbLED (1, c0)
    for i in reversed(xrange(0, 15)):
        c0 = [min(int(x * 1.5**i), 255) for x in [1,0,0]]
        c1 = [min(int(x * 1.5**i), 255) for x in [0,0,1]]
        rgbLED (0, c1)
        rgbLED (1, c0)
    rgbLED (0, [0, 0, 0])
    rgbLED (1, [0, 0, 0])

digits = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71]

def displayHex(num):
    w(0x92000000, 1)
    x = num % 16;
    adr = 7*4
    w(0x92000020 + adr, digits[x])
    num = num / 16
    while (adr > 0): #(num > 0):
        adr = adr - 4
        x = num % 16;
        w(0x92000020 + adr, digits[x])
        num = num / 16

def displayDec(num):
    w(0x92000000, 1)
    x = num % 10;
    adr = 7*4
    w(0x92000020 + adr, digits[x])
    num = num / 10
    while (adr > 0): #(num > 0):
        adr = adr - 4
        x = num % 10;
        w(0x92000020 + adr, digits[x])
        num = num / 10

def rgbLED(diode, rgb):
    # diode: 0 or 1, rgb: [r, g, b]
    # w(0x93000000, 1)
    w(0x93000008+4*diode, 256 * (256 * rgb[0] + rgb[1]) + rgb[2])


w(0x93000008, 0x301000)
for i in range(1,8):
    displayHex(0x01234567)
    displayHex(0x89abcdef)
